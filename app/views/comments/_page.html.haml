.comments
  - comments.recent.each do |comment|
    - commenter = User.find_by(id: comment.user_id)
    .media[comment]
      .media-left
        .comment__user
          .user-image-sm{style:"float:left;background-color: #eee; background-image:url(#{asset_url(commenter.nil? ? 'default-user.png' : commenter.image)}); #{"background-position: 0 4px; background-repeat: no-repeat;" if commenter.nil?}"}
      .media-body
        - has_target_class = comment.target_agents.any? ? "has_target" : ""
        .comment__body{ class: has_target_class }
          - if comment.target_agents.any?
            .comment__to-agent
              - target_agent = comment.target_agents.first
              %span.comment__to-agent_default.hidden-xs
                #{target_agent.organization} #{target_agent.name}님#{(" 이외 #{comment.target_agents.count - 1}분" if comment.target_agents.count > 1)}에게
              %span.comment__to-agent_mobile.visible-xs
                = image_tag target_agent.image.md.url, style: "height: 24px;"
                #{target_agent.organization} #{target_agent.name}
                님#{(" 이외 #{comment.target_agents.count - 1}분" if comment.target_agents.count > 1)}에게
              - read = [true, false, false, false, false, false, false, false].sample
              - if read
                %span.js-popover{ "data-url": "#xxxx", "data-placement": "bottom", "data-trigger": "hover", style: 'color: red;' }
                  %i.fa.fa-check
                  읽음
                  = rand(10)
                .hidden
                  #xxxx
                    - comment.target_agents.each do |target_agent|
                      %span=target_agent.name
                      %span=
                      %br




          %p= raw screened(comment, :body)

        .comment__meta
          %span.comment__user-nm
            = comment.user_nickname

          %span.comment__date
            = date_f comment.created_at

          = render 'likes/button', likable: comment

          %span.comment__action
            - if can? :destroy, comment
              = link_to '삭제', comment, method: :delete, data: { confirm: '정말 삭제하시겠습니까?' }
            - if current_user != comment.user
              = render 'reports/button', reportable: comment

          - if comment.choice.present?
            %span.comment__choice{ class: comment.choice }= comment.choice.text

- if comments.first.try(:commentable).present?
  - commentable = comments.first.commentable
  .text-center
    = paginate comments, theme: 'twitter-bootstrap-3', params: { controller: 'comments', action: 'index', commentable_id: commentable.id, commentable_type: commentable.class.name, id: nil, show_form: local_assigns[:show_form] }
