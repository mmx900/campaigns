.agenda-container
  %section.cover-section{style: "background-image: linear-gradient(rgba(0, 0, 0, .3), rgba(0, 0, 0, .3)), url(#{asset_url(@agenda.image_url(:lg))}); background-position: center center;"}
    .container
      %h1
        %small
          %span.label.label-danger= Agenda.model_name.human
        %br
        = link_to @agenda, style: 'color: white' do
          = @agenda.name
      .agenda-intro
        .agenda-desc= smart_format @agenda.memo

- if @agenda.name == '선거제도'
  - %w(19대_대선후보 20대_국회의원).each do |position|
    %section.page-block.page-opinions
      .container
        .page-header
          %h2
            #{position} #{Opinion.model_name.human}
            %small #{position} #{@agenda.agents.of_position(position).count}명에게 #{Opinion.model_name.human}을 받았습니다.
        - @agenda.issues.each do |issue|
          %h3= issue.title

          - if issue.body.present?
            .issue-body
              %p!= simple_format(h(issue.body))

          .opinion-agents-list
            .row
              - ["찬성", "반대", nil].each do |quote|
                - agents = issue.categorized_agents(position, quote)
                .col-sm-4{ class: ('hidden-xs' if agents.empty?) }
                  .position
                    = quote || "#{Opinion.model_name.human}없음"
                    %span{ style: 'font-weight: normal' } #{agents.count}명

                  = render 'issues/agents', agents: agents, issue: issue, quote: quote, max_count: 15
- else
  - Issue.group_by_theme(@agenda.issues).each_with_index do |(agenda_theme, issues), i|
    %section.page-block.page-opinions{ class: "page-block-#{i%2}"}
      .container
        - if agenda_theme.present?
          = render 'agenda_themes/line_item', agenda_theme: agenda_theme

        - issues.each do |issue|
          %section{ style: 'margin-bottom: 3em;' }
            %h3
              = link_to issue.title, issue

            - if issue.body.present?
              .issue-body
                %p!= simple_format(h(issue.body))

            - if issue.has_any_stances?
              = render 'opinions/stances', agents: issue.agents, issue: issue
            .media-list
              - Agent.of_position('19대_대선후보').shuffle.each do |agent|
                - issue.opinions.of_agent(agent).each do |opinion|
                  - next unless opinion.has_content?
                  = render 'opinions/line_item', opinion: opinion
