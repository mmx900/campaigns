- is_one_speaker_view = local_assigns[:speaker].present?
- is_one_theme_view = local_assigns[:agenda_theme].present?
%section.page-block
  .container
    .page-header
      %h2
        주요 의제
        %span.text-danger #{agendas.count}
        개
    .nav-tabs{ style: 'border:0' }
      - agendas.each_with_index do |agenda, i|
        .hidden-xs{ style: 'padding:0 10px 10px 0; display: inline-block;' }
          %a{ href: "#agenda_#{i}", role: "tab", data: { toggle: "tab" }}
            .card{ style: 'margin-bottom:0' }
              .card-image{ style: "position: relative; width: 100px; height: 100px; background-image: linear-gradient(rgba(0,0,0,0),rgba(0,0,0,.5)), url(#{agenda.image.sm.url}); background-size: cover; background-position: center center; text-align:center; color: white;" }
                %h5{ style: 'position:absolute; left:0; right:0; bottom:0; '}= agenda.name
      .row.visible-xs
        - agendas.each_with_index do |agenda, i|
          .col-xs-4{ style: 'margin-bottom: 30px;' }
            %a{ href: "#agenda_#{i}", role: "tab", data: { toggle: "tab" }}
              .card{ style: 'margin-bottom:0' }
                .card-image{ style: "position: relative; width: 100%; height: 0; padding-top: 100%; background-image: linear-gradient(rgba(0,0,0,0),rgba(0,0,0,.5)), url(#{agenda.image.sm.url}); background-size: cover; background-position: center center; text-align:center; color: white;" }
                  %h5{ style: 'position:absolute; left:0; right:0; bottom:0; '}= agenda.name

%section.page-block
  .container
    .tab-content{ style: 'border:0; padding:0' }
      - agendas.each_with_index do |agenda, i|
        .tab-pane{ id: "agenda_#{i}", class: ('active' if i == 0) }
          .page-header
            %h2= agenda.name
          - issues = is_one_theme_view ? agenda.issues.with_theme(agenda_theme) : agenda.issues

          - Issue.group_by_theme(issues).each_with_index do |(agenda_theme, issues), i|
            - next if is_one_speaker_view and !Opinion.where(issue_id: issues).exists?(speaker: local_assigns[:speaker])
            %section
              - if !is_one_theme_view and agenda_theme.present?
                = render 'agenda_themes/line_item', agenda_theme: agenda_theme
              - issues.each do |issue|
                - next if is_one_speaker_view and !issue.opinions.exists?(speaker: local_assigns[:speaker])
                %section{ style: 'margin-bottom: 3em;' }
                  %h3[issue]
                    = issue.title

                    - if user_signed_in? and current_user.is_admin?
                      .pull-right.hidden-sm.hidden-xs
                        = form_tag new_or_edit_admin_opinions_path, method: :get, class: 'form-inline', target: '_blank' do
                          .inline.field
                            = hidden_field_tag :issue_id, issue.id
                            %select{name: :speaker_id, class: 'form-control'}
                              - all_speakers = local_assigns[:speakers] || [local_assigns[:speaker]]
                              - all_speakers.each do |speaker|
                                %option{ value: speaker.id }
                                  = speaker.name
                            %button.btn.btn-default{ type: "submit" } 입력

                  - if issue.body.present?
                    .issue-body
                      %p!= simple_format(h(issue.body))

                  - if local_assigns[:speaker].present?
                    .panel.panel-default
                      .list-group
                        - issue.opinions.of_speaker(speaker).each do |opinion|
                          = render 'opinions/line_item', opinion: opinion
                  - else
                    = render 'opinions/stances_list', issue: issue, speakers: speakers

                    - if issue.opinions.where(speaker: speakers).any?(&:has_content?)
                      .panel.panel-default
                        .list-group
                          - speakers.shuffle.each do |speaker|
                            - issue.opinions.of_speaker(speaker).each do |opinion|
                              - next unless opinion.has_content?
                              = render 'opinions/line_item', opinion: opinion
